
// Service factory to choose between real and mock implementations
import { IComplaintsService } from './interfaces/IComplaintsService';
import { IAnalyticsService } from './interfaces/IAnalyticsService';
import { IGamificationService } from './interfaces/IGamificationService';
import { INotificationService } from './interfaces/INotificationService';
import { IAuthService } from './interfaces/IAuthService';

// OpenAPI-based services
import { OpenApiServiceFactory } from './openapi/OpenApiServiceFactory';
import { AutoGeneratedComplaintsService } from './openapi/AutoGeneratedComplaintsService';

// Real implementations
import { RealComplaintsService } from './real/RealComplaintsService';
import { RealAnalyticsService } from './real/RealAnalyticsService';
import { RealGamificationService } from './real/RealGamificationService';
import { RealNotificationService } from './real/RealNotificationService';
import { RealAuthService } from './real/RealAuthService';

// Mock implementations
import { MockComplaintsService } from './mock/MockComplaintsService';
import { MockAnalyticsService } from './mock/MockAnalyticsService';
import { MockGamificationService } from './mock/MockGamificationService';
import { MockNotificationService } from './mock/MockNotificationService';
import { MockAuthService } from './mock/MockAuthService';

// Configuration to determine which implementation to use
const USE_MOCK_SERVICES = process.env.NODE_ENV === 'development' || !process.env.VITE_API_URL;
const USE_OPENAPI_SERVICES = process.env.VITE_USE_OPENAPI === 'true';

class ServiceFactory {
  private complaintsService: IComplaintsService;
  private analyticsService: IAnalyticsService;
  private gamificationService: IGamificationService;
  private notificationService: INotificationService;
  private authService: IAuthService;
  private openApiFactory?: OpenApiServiceFactory;

  constructor() {
    this.initializeServices();
  }

  private async initializeServices() {
    if (USE_OPENAPI_SERVICES && !USE_MOCK_SERVICES) {
      // Initialize OpenAPI-based services
      const baseUrl = process.env.VITE_API_URL || 'http://localhost/api';
      this.openApiFactory = new OpenApiServiceFactory(baseUrl);
      
      try {
        await this.openApiFactory.initialize();
        
        // Use auto-generated services where available
        this.complaintsService = new AutoGeneratedComplaintsService(this.openApiFactory.getService('complaints'));
        this.analyticsService = this.openApiFactory.getService<IAnalyticsService>('Analytics') || new RealAnalyticsService();
        this.gamificationService = this.openApiFactory.getService<IGamificationService>('Gamification') || new RealGamificationService();
        this.notificationService = this.openApiFactory.getService<INotificationService>('Notifications') || new RealNotificationService();
        this.authService = this.openApiFactory.getService<IAuthService>('Authentication') || new RealAuthService();
        
        console.log('Using OpenAPI-generated services');
      } catch (error) {
        console.warn('Failed to initialize OpenAPI services, falling back to manual implementations:', error);
        this.initializeManualServices();
      }
    } else {
      this.initializeManualServices();
    }
  }

  private initializeManualServices() {
    if (USE_MOCK_SERVICES) {
      this.complaintsService = new MockComplaintsService();
      this.analyticsService = new MockAnalyticsService();
      this.gamificationService = new MockGamificationService();
      this.notificationService = new MockNotificationService();
      this.authService = new MockAuthService();
      console.log('Using mock services');
    } else {
      this.complaintsService = new RealComplaintsService();
      this.analyticsService = new RealAnalyticsService();
      this.gamificationService = new RealGamificationService();
      this.notificationService = new RealNotificationService();
      this.authService = new RealAuthService();
      console.log('Using real services');
    }
  }

  getComplaintsService(): IComplaintsService {
    return this.complaintsService;
  }

  getAnalyticsService(): IAnalyticsService {
    return this.analyticsService;
  }

  getGamificationService(): IGamificationService {
    return this.gamificationService;
  }

  getNotificationService(): INotificationService {
    return this.notificationService;
  }

  getAuthService(): IAuthService {
    return this.authService;
  }

  // Method to switch between implementations at runtime (for testing)
  switchToMock(): void {
    this.initializeManualServices = () => {
      this.complaintsService = new MockComplaintsService();
      this.analyticsService = new MockAnalyticsService();
      this.gamificationService = new MockGamificationService();
      this.notificationService = new MockNotificationService();
      this.authService = new MockAuthService();
    };
    this.initializeManualServices();
  }

  switchToReal(): void {
    this.initializeManualServices = () => {
      this.complaintsService = new RealComplaintsService();
      this.analyticsService = new RealAnalyticsService();
      this.gamificationService = new RealGamificationService();
      this.notificationService = new RealNotificationService();
      this.authService = new RealAuthService();
    };
    this.initializeManualServices();
  }

  async switchToOpenApi(): Promise<void> {
    if (!this.openApiFactory) {
      const baseUrl = process.env.VITE_API_URL || 'http://localhost/api';
      this.openApiFactory = new OpenApiServiceFactory(baseUrl);
      await this.openApiFactory.initialize();
    }
    
    this.complaintsService = new AutoGeneratedComplaintsService(this.openApiFactory.getService('complaints'));
    this.analyticsService = this.openApiFactory.getService<IAnalyticsService>('Analytics');
    this.gamificationService = this.openApiFactory.getService<IGamificationService>('Gamification');
    this.notificationService = this.openApiFactory.getService<INotificationService>('Notifications');
    this.authService = this.openApiFactory.getService<IAuthService>('Authentication');
  }

  isMockMode(): boolean {
    return USE_MOCK_SERVICES;
  }

  isOpenApiMode(): boolean {
    return USE_OPENAPI_SERVICES && !USE_MOCK_SERVICES;
  }

  getOpenApiFactory(): OpenApiServiceFactory | undefined {
    return this.openApiFactory;
  }
}

export const serviceFactory = new ServiceFactory();
