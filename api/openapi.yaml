openapi: 3.0.3
info:
  title: Plataforma Ciudadana de Transparencia API
  description: API completa para la plataforma de reclamos ciudadanos con gamificación y análisis
  version: 1.0.0
  contact:
    name: API Support
    url: https://transparencia.gob.ar/support
    email: support@transparencia.gob.ar
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost/api
    description: Development server
  - url: https://api.transparencia.gob.ar
    description: Production server

paths:
  # =================================
  # AUTHENTICATION ENDPOINTS
  # =================================
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user with email/username and password
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - login
                - password
              properties:
                login:
                  type: string
                  description: Email or username
                  example: usuario@example.com
                password:
                  type: string
                  format: password
                  example: secretpassword
                remember_me:
                  type: boolean
                  default: false
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/signup:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Create new user account
      operationId: signupUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - full_name
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 50
                  example: johndoe
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  minLength: 6
                  example: secretpassword
                full_name:
                  type: string
                  maxLength: 100
                  example: John Doe
                terms_accepted:
                  type: boolean
                  example: true
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/google:
    post:
      tags:
        - Authentication
      summary: Google OAuth login
      description: Authenticate user with Google OAuth token
      operationId: googleLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: Google OAuth access token
                  example: ya29.a0AfH6SMC...
      responses:
        '200':
          description: Google login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid Google token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Invalidate user session
      operationId: logoutUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout successful

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user profile
      description: Retrieve authenticated user information
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  # =================================
  # COMPLAINTS ENDPOINTS
  # =================================
  /complaints:
    get:
      tags:
        - Complaints
      summary: Get complaints list
      description: Retrieve paginated list of complaints with optional filters
      operationId: getComplaints
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: category
          in: query
          schema:
            type: string
            enum: [Salud, Transporte, Educación, Seguridad, Ambiente]
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ComplaintStatus'
        - name: location
          in: query
          schema:
            type: string
        - name: trending
          in: query
          schema:
            type: boolean
        - name: timeRange
          in: query
          schema:
            type: string
            enum: [today, week, month, year]
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Complaints retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Complaint'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Complaints
      summary: Create new complaint
      description: Submit a new complaint
      operationId: createComplaint
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComplaintCreate'
      responses:
        '201':
          description: Complaint created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Complaint'

  /complaints/{id}:
    get:
      tags:
        - Complaints
      summary: Get complaint by ID
      description: Retrieve specific complaint details
      operationId: getComplaintById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Complaint retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComplaintDetail'

    put:
      tags:
        - Complaints
      summary: Update complaint
      description: Update existing complaint (author only)
      operationId: updateComplaint
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComplaintUpdate'
      responses:
        '200':
          description: Complaint updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Complaint'

    delete:
      tags:
        - Complaints
      summary: Delete complaint
      description: Delete complaint (author or admin only)
      operationId: deleteComplaint
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Complaint deleted

  /complaints/{id}/like:
    post:
      tags:
        - Complaints
      summary: Toggle like on complaint
      description: Add or remove like from complaint
      operationId: toggleLike
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Like toggled
          content:
            application/json:
              schema:
                type: object
                properties:
                  liked:
                    type: boolean
                  total_likes:
                    type: integer

  /complaints/{id}/share:
    post:
      tags:
        - Complaints
      summary: Share complaint
      description: Record complaint share and generate share URL
      operationId: shareComplaint
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                platform:
                  type: string
                  enum: [facebook, twitter, whatsapp, email, telegram]
      responses:
        '200':
          description: Share recorded
          content:
            application/json:
              schema:
                type: object
                properties:
                  share_url:
                    type: string
                  total_shares:
                    type: integer

  /complaints/{id}/comments:
    get:
      tags:
        - Complaints
      summary: Get complaint comments
      description: Retrieve comments for specific complaint
      operationId: getComplaintComments
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Comments retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Complaints
      summary: Add comment to complaint
      description: Submit new comment on complaint
      operationId: addComment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  maxLength: 1000
      responses:
        '201':
          description: Comment added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  /complaints/trending:
    get:
      tags:
        - Complaints
      summary: Get trending complaints
      description: Retrieve currently trending complaints
      operationId: getTrendingComplaints
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            maximum: 50
      responses:
        '200':
          description: Trending complaints retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Complaint'

  /complaints/categories:
    get:
      tags:
        - Complaints
      summary: Get complaint categories
      description: Retrieve available complaint categories
      operationId: getComplaintCategories
      responses:
        '200':
          description: Categories retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    count:
                      type: integer
                    icon:
                      type: string

  /complaints/stats:
    get:
      tags:
        - Complaints
      summary: Get complaint statistics
      description: Retrieve general complaint statistics
      operationId: getComplaintStats
      responses:
        '200':
          description: Statistics retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComplaintStats'

  /complaints/upload:
    post:
      tags:
        - Complaints
      summary: Upload file for complaint
      description: Upload image or document for complaint
      operationId: uploadFile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                complaint_id:
                  type: string
      responses:
        '200':
          description: File uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  file_url:
                    type: string
                  file_id:
                    type: string

  /complaints/detect-entities:
    post:
      tags:
        - Complaints
      summary: Detect entities in text
      description: Extract institutions and locations from complaint text
      operationId: detectEntities
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
      responses:
        '200':
          description: Entities detected
          content:
            application/json:
              schema:
                type: object
                properties:
                  entities:
                    type: array
                    items:
                      $ref: '#/components/schemas/Entity'

  # =================================
  # ANALYTICS ENDPOINTS
  # =================================
  /analytics/dashboard:
    get:
      tags:
        - Analytics
      summary: Get dashboard statistics
      description: Retrieve main dashboard metrics
      operationId: getDashboardStats
      responses:
        '200':
          description: Dashboard stats retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStats'

  /analytics/categories:
    get:
      tags:
        - Analytics
      summary: Get category distribution
      description: Retrieve complaint distribution by category
      operationId: getCategoryStats
      responses:
        '200':
          description: Category stats retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryStats'

  /analytics/timeline:
    get:
      tags:
        - Analytics
      summary: Get timeline data
      description: Retrieve complaints and resolution timeline
      operationId: getTimelineData
      parameters:
        - name: days
          in: query
          schema:
            type: integer
            default: 30
            minimum: 1
            maximum: 365
      responses:
        '200':
          description: Timeline data retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimelineData'

  /analytics/locations:
    get:
      tags:
        - Analytics
      summary: Get location statistics
      description: Retrieve complaint distribution by location
      operationId: getLocationStats
      responses:
        '200':
          description: Location stats retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationStats'

  /analytics/trending:
    get:
      tags:
        - Analytics
      summary: Get trending topics
      description: Retrieve currently trending topics and tags
      operationId: getTrendingTopics
      responses:
        '200':
          description: Trending topics retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrendingTopic'

  /analytics/system-health:
    get:
      tags:
        - Analytics
      summary: Get system health metrics
      description: Retrieve system performance and health data
      operationId: getSystemHealth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: System health retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemHealth'

  /analytics/reports:
    post:
      tags:
        - Analytics
      summary: Generate custom report
      description: Generate and download custom analytics report
      operationId: generateReport
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
              properties:
                type:
                  type: string
                  enum: [weekly, monthly, category, location, custom]
                filters:
                  type: object
                  properties:
                    date_from:
                      type: string
                      format: date
                    date_to:
                      type: string
                      format: date
                    categories:
                      type: array
                      items:
                        type: string
                    locations:
                      type: array
                      items:
                        type: string
                format:
                  type: string
                  enum: [pdf, excel, csv]
                  default: pdf
      responses:
        '200':
          description: Report generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  report_url:
                    type: string
                  expires_at:
                    type: string
                    format: date-time

  # =================================
  # GAMIFICATION ENDPOINTS
  # =================================
  /gamification/profile:
    get:
      tags:
        - Gamification
      summary: Get user gamification profile
      description: Retrieve user's points, level, and achievements
      operationId: getUserProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

  /gamification/leaderboard:
    get:
      tags:
        - Gamification
      summary: Get leaderboard
      description: Retrieve top users by points
      operationId: getLeaderboard
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [weekly, monthly, all-time]
            default: weekly
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            maximum: 100
      responses:
        '200':
          description: Leaderboard retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LeaderboardEntry'

  /gamification/badges:
    get:
      tags:
        - Gamification
      summary: Get available badges
      description: Retrieve all available badges and their requirements
      operationId: getBadges
      responses:
        '200':
          description: Badges retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badge'

  /gamification/achievements:
    get:
      tags:
        - Gamification
      summary: Get user achievements
      description: Retrieve user's unlocked achievements
      operationId: getUserAchievements
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Achievements retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Achievement'

  /gamification/challenges:
    get:
      tags:
        - Gamification
      summary: Get active challenges
      description: Retrieve current active challenges
      operationId: getActiveChallenges
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Challenges retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Challenge'

  /gamification/award-points:
    post:
      tags:
        - Gamification
      summary: Award points to user
      description: Award points for specific actions (internal use)
      operationId: awardPoints
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - points
                - reason
              properties:
                user_id:
                  type: string
                points:
                  type: integer
                  minimum: 1
                reason:
                  type: string
                  maxLength: 255
      responses:
        '200':
          description: Points awarded
          content:
            application/json:
              schema:
                type: object
                properties:
                  new_total:
                    type: integer
                  level_up:
                    type: boolean

  # =================================
  # NOTIFICATIONS ENDPOINTS
  # =================================
  /notifications:
    get:
      tags:
        - Notifications
      summary: Get user notifications
      description: Retrieve user's notifications
      operationId: getNotifications
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: unread_only
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Notifications retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Notifications
      summary: Create notification
      description: Create new notification (admin only)
      operationId: createNotification
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationCreate'
      responses:
        '201':
          description: Notification created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'

  /notifications/{id}/read:
    put:
      tags:
        - Notifications
      summary: Mark notification as read
      description: Mark specific notification as read
      operationId: markNotificationRead
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Notification marked as read

  /notifications/read-all:
    put:
      tags:
        - Notifications
      summary: Mark all notifications as read
      description: Mark all user notifications as read
      operationId: markAllNotificationsRead
      security:
        - bearerAuth: []
      responses:
        '200':
          description: All notifications marked as read

  /notifications/unread-count:
    get:
      tags:
        - Notifications
      summary: Get unread notifications count
      description: Get count of unread notifications for user
      operationId: getUnreadNotificationsCount
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Unread count retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer

  /notifications/{id}:
    delete:
      tags:
        - Notifications
      summary: Delete notification
      description: Delete specific notification
      operationId: deleteNotification
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Notification deleted

# =================================
# COMPONENTS
# =================================
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Authentication Schemas
    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
        expires_at:
          type: string
          format: date-time

    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        full_name:
          type: string
        avatar_url:
          type: string
          format: uri
        verified:
          type: boolean
        created_at:
          type: string
          format: date-time
        last_login:
          type: string
          format: date-time

    # Complaint Schemas
    ComplaintStatus:
      type: string
      enum: [pending, in-progress, resolved, rejected]

    Complaint:
      type: object
      properties:
        id:
          type: string
        author:
          type: string
        avatar:
          type: string
        content:
          type: string
        category:
          type: string
        status:
          $ref: '#/components/schemas/ComplaintStatus'
        location:
          type: string
        coordinates:
          type: object
          properties:
            lat:
              type: number
            lng:
              type: number
        likes:
          type: integer
        comments:
          type: integer
        shares:
          type: integer
        verified:
          type: boolean
        trending:
          type: boolean
        entities:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
        time:
          type: string
        created_at:
          type: string
          format: date-time

    ComplaintDetail:
      allOf:
        - $ref: '#/components/schemas/Complaint'
        - type: object
          properties:
            description:
              type: string
            attachments:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  url:
                    type: string
                  type:
                    type: string
                    enum: [image, document]
            comments_list:
              type: array
              items:
                $ref: '#/components/schemas/Comment'

    ComplaintCreate:
      type: object
      required:
        - content
        - category
        - location
      properties:
        content:
          type: string
          maxLength: 2000
        category:
          type: string
        location:
          type: string
        coordinates:
          type: object
          properties:
            lat:
              type: number
            lng:
              type: number
        attachments:
          type: array
          items:
            type: string

    ComplaintUpdate:
      type: object
      properties:
        content:
          type: string
          maxLength: 2000
        category:
          type: string
        status:
          $ref: '#/components/schemas/ComplaintStatus'

    ComplaintStats:
      type: object
      properties:
        totalComplaints:
          type: integer
        todayComplaints:
          type: integer
        weeklyComplaints:
          type: integer
        monthlyComplaints:
          type: integer
        resolvedComplaints:
          type: integer
        pendingComplaints:
          type: integer
        averageResolutionTime:
          type: number

    Entity:
      type: object
      properties:
        text:
          type: string
        type:
          type: string
          enum: [institution, location, person]
        confidence:
          type: number
          minimum: 0
          maximum: 1

    Comment:
      type: object
      properties:
        id:
          type: string
        author:
          type: string
        avatar:
          type: string
        content:
          type: string
        likes:
          type: integer
        created_at:
          type: string
          format: date-time

    # Analytics Schemas
    DashboardStats:
      type: object
      properties:
        totalComplaints:
          type: integer
        todayComplaints:
          type: integer
        inProcess:
          type: integer
        resolved:
          type: integer
        resolutionRate:
          type: number
        trends:
          type: object
          properties:
            complaints:
              type: number
            resolution:
              type: number

    CategoryStats:
      type: object
      properties:
        name:
          type: string
        count:
          type: integer
        percentage:
          type: number
        trend:
          type: number

    LocationStats:
      type: object
      properties:
        location:
          type: string
        count:
          type: integer
        percentage:
          type: number
        coordinates:
          type: object
          properties:
            lat:
              type: number
            lng:
              type: number

    TimelineData:
      type: object
      properties:
        date:
          type: string
          format: date
        complaints:
          type: integer
        resolved:
          type: integer

    TrendingTopic:
      type: object
      properties:
        tag:
          type: string
        count:
          type: integer
        trend:
          type: number

    SystemHealth:
      type: object
      properties:
        database_status:
          type: string
          enum: [healthy, warning, error]
        api_response_time:
          type: number
        active_users:
          type: integer
        system_load:
          type: number
        uptime:
          type: string

    # Gamification Schemas
    UserProfile:
      type: object
      properties:
        user_id:
          type: string
        level:
          type: integer
        transparencyPoints:
          type: integer
        totalComplaintsSubmitted:
          type: integer
        helpfulVotes:
          type: integer
        communitySolutions:
          type: integer
        weeklyRank:
          type: integer
        badges:
          type: array
          items:
            type: string
        achievements:
          type: array
          items:
            type: string

    LeaderboardEntry:
      type: object
      properties:
        rank:
          type: integer
        user_id:
          type: string
        username:
          type: string
        avatar:
          type: string
        points:
          type: integer
        level:
          type: integer

    Badge:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        icon:
          type: string
        requirements:
          type: object
        rarity:
          type: string
          enum: [common, rare, epic, legendary]

    Achievement:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        icon:
          type: string
        unlocked_at:
          type: string
          format: date-time
        progress:
          type: object
          properties:
            current:
              type: integer
            target:
              type: integer

    Challenge:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        reward_points:
          type: integer
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        progress:
          type: object
          properties:
            current:
              type: integer
            target:
              type: integer
        completed:
          type: boolean

    # Notification Schemas
    Notification:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        message:
          type: string
        type:
          type: string
          enum: [info, warning, success, error]
        read:
          type: boolean
        created_at:
          type: string
          format: date-time
        data:
          type: object
          description: Additional notification data

    NotificationCreate:
      type: object
      required:
        - title
        - message
        - type
      properties:
        title:
          type: string
          maxLength: 100
        message:
          type: string
          maxLength: 500
        type:
          type: string
          enum: [info, warning, success, error]
        user_id:
          type: string
          description: If not provided, sends to all users
        data:
          type: object

    # Common Schemas
    Pagination:
      type: object
      properties:
        current_page:
          type: integer
        total_pages:
          type: integer
        total_items:
          type: integer
        items_per_page:
          type: integer
        has_next:
          type: boolean
        has_previous:
          type: boolean

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: integer
        details:
          type: object

tags:
  - name: Authentication
    description: User authentication and account management
  - name: Complaints
    description: Complaint submission and management
  - name: Analytics
    description: Data analytics and reporting
  - name: Gamification
    description: User engagement and gamification features
  - name: Notifications
    description: User notification system